{"version":3,"sources":["features/counter.ts","components/organisms/CounterBoard.tsx","containers/organisms/CounterBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["counterState","atom","key","default","start","Date","now","set","current","on","CounterBoard","count","inputMin","inputSec","inputChange","resetSwitch","startSwitch","time","second","min","Math","floor","sec","toString","slice","getTime","className","type","ref","onChange","value","split","onClick","color","EnhancedCounterBoard","useRecoilState","timer","setCount","useRef","useEffect","intervalId","setInterval","alert","currentState","clearInterval","Number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","err","console","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8bcc98c.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { atom } from \"recoil\";\n\nexport const counterState = atom({\n  key: \"counter\",\n  default: {\n    start: Date.now(),\n    set: 1500000,\n    current: 1500000,\n    on: false,\n  },\n});\n\nexport const getTime = (time: number) => {\n  const second = time / 1000;\n  const min = Math.floor(second / 60);\n  const sec = Math.floor(second % 60);\n\n  return (\n    (\"00\" + min.toString()).slice(-2) + \":\" + (\"00\" + sec.toString()).slice(-2)\n  );\n};\n","import React, { FC } from \"react\";\nimport \"./CounterBoard.css\";\nimport { getTime } from \"../../features/counter\";\n\ntype Props = {\n  count?: number;\n  resetSwitch: () => void;\n  startSwitch: () => void;\n  inputMin: React.RefObject<HTMLInputElement>;\n  inputSec: React.RefObject<HTMLInputElement>;\n  inputChange: () => void;\n  on: boolean;\n};\n\nconst CounterBoard: FC<Props> = ({\n  count = 0,\n  inputMin,\n  inputSec,\n  inputChange,\n  resetSwitch = () => undefined,\n  startSwitch = () => undefined,\n  on = false,\n}) => {\n  const current = getTime(count);\n\n  return (\n    <div>\n      <div className=\"flex-center\">\n        <h1>Time</h1>\n      </div>\n      <div>\n        <h1>\n          <input\n            type=\"text\"\n            ref={inputMin}\n            onChange={inputChange}\n            value={current.split(\":\")[0]}\n            className=\"input-area\"\n          />\n          :\n          <input\n            type=\"text\"\n            ref={inputSec}\n            onChange={inputChange}\n            value={current.split(\":\")[1]}\n            className=\"input-area\"\n          />\n        </h1>\n      </div>\n      <div>\n        <div className=\"flex-center\">\n          <button onClick={startSwitch}>{on ? \"STOP\" : \"START\"}</button>\n          <button color=\"red\" onClick={resetSwitch}>\n            RESET\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CounterBoard;\n","import { FC, useEffect, useRef } from \"react\";\nimport { useRecoilState } from \"recoil\";\n\nimport { counterState } from \"features/counter\";\nimport CounterBoard from \"components/organisms/CounterBoard\";\n\nconst EnhancedCounterBoard: FC = () => {\n  const [timer, setCount] = useRecoilState(counterState);\n  const inputMin = useRef<HTMLInputElement>(null);\n  const inputSec = useRef<HTMLInputElement>(null);\n\n  const inputChange = () => {\n    const min = Number(inputMin.current?.value) * 60 * 1000;\n    const sec = Number(inputSec.current?.value) * 1000;\n    const set = min + sec;\n    const current = set;\n    setCount((currentState) => {\n      return { ...currentState, set, current };\n    });\n  };\n\n  const resetSwitch = () => {\n    setCount((currentState) => {\n      return { ...currentState, current: timer.set, on: false };\n    });\n  };\n  const startSwitch = () => {\n    if (!timer.on) {\n      const start = Date.now() - (timer.set - timer.current);\n      setCount((currentState) => {\n        return { ...currentState, ...{ start }, on: !timer.on };\n      });\n    } else {\n      setCount((currentState) => {\n        return { ...currentState, on: !timer.on };\n      });\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (timer.on) {\n        const current = timer.start + timer.set - Date.now();\n        if (current <= 0) {\n          alert(\"Time for strech\");\n          setCount((currentState) => {\n            return {\n              ...currentState,\n              current: timer.set,\n              start: Date.now(),\n              on: true,\n            };\n          });\n        } else {\n          setCount((currentState) => {\n            return { ...currentState, ...{ current } };\n          });\n        }\n      }\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [timer, setCount]);\n\n  return (\n    <CounterBoard\n      count={timer.current}\n      on={timer.on}\n      {...{ resetSwitch, startSwitch, inputMin, inputSec, inputChange }}\n    />\n  );\n};\n\nexport default EnhancedCounterBoard;\n","import { FC } from \"react\";\n\nimport CounterBoard from \"containers/organisms/CounterBoard\";\n\nimport \"./App.css\";\n\nconst App: FC = () => (\n  <div className=\"container\">\n    <header>\n      <h1>Pomodoro Timer</h1>\n    </header>\n    <CounterBoard />\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\")\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch((err) => console.error(err)); // eslint-disable-line no-console\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <RecoilRoot>\n    <App />\n  </RecoilRoot>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}